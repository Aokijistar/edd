package mx.unam.ciencias.edd;

import java.util.Iterator;
import java.util.NoSuchElementException;

import org.w3c.dom.Node;

/**
 * <p>Clase genérica para listas doblemente ligadas.</p> 
 *
 * <p>Las listas nos permiten agregar elementos al inicio o final de la lista,
 * eliminar elementos de la lista, comprobar si un elemento está o no en la
 * lista, y otras operaciones básicas.</p>
 *
 * <p>Las listas no aceptan a <code>null</code> como elemento.</p>
 *
 * @param <T> El tipo de los elementos de la lista.
 */
public class Lista<T> implements Coleccion<T> {

    /* Clase interna privada para nodos. */
    private class Nodo {
        /* El elemento del nodo. */
        private T elemento;
        /* El nodo anterior. */
        private Nodo anterior;
        /* El nodo siguiente. */
        private Nodo siguiente;

        /* Construye un nodo con un elemento. */
        private Nodo(T elemento) {
            this.elemento = elemento;
        }
    }

    /* Clase interna privada para iteradores. */
    private class Iterador implements IteradorLista<T> {
        /* El nodo anterior. */
        private Nodo anterior;
        /* El nodo siguiente. */
        private Nodo siguiente;

        private Iterador() {
            anterior = null;
            siguiente = cabeza;
        }

        @Override public boolean hasNext() {
            return (siguiente != null);
        }

        @Override public T next() {
            if (siguiente != null){
                anterior = siguiente;
                siguiente = siguiente.siguiente;
            }
            return (siguiente.elemento);
        }

        @Override public boolean hasPrevious() {
            return (anterior != null);
        }

        @Override public T previous() {
            if (anterior != null){
            siguiente = anterior;
            anterior = anterior.anterior;
        }
         return (siguiente.elemento);
        }
        /* Mueve el iterador al inicio de la lista. */
        @Override public void start() {
            anterior = null ;
            siguiente = cabeza;
        }

        /* Mueve el iterador al final de la lista. */
        @Override public void end() {
           siguiente = null;
           anterior = rabo;
        
        }
    }

    /* Primer elemento de la lista. */
    private Nodo cabeza;
    /* Último elemento de la lista. */
    private Nodo rabo;
    /* Número de elementos en la lista. */
    private int longitud;

    /**
     * Regresa la longitud de la lista. El método es idéntico a {@link
     * #getElementos}.
     * @return la longitud de la lista, el número de elementos que contiene.
     */
    public int getLongitud() {
        return (this.longitud);
    }

    /**
     * Regresa el número elementos en la lista. El método es idéntico a {@link
     * #getLongitud}.
     * @return el número elementos en la lista.
     */
    @Override public int getElementos() {
        return (getLongitud());
    }

    /**
     * Nos dice si la lista es vacía.
     * @return <code>true</code> si la lista es vacía, <code>false</code> en
     *         otro caso.
     */
    @Override public boolean esVacia() {
        return(cabeza == null);
    }

    /**
     * Agrega un elemento a la lista. Si la lista no tiene elementos, el
     * elemento a agregar será el primero y último. El método es idéntico a
     * {@link #agregaFinal}.
     * @param elemento el elemento a agregar.
     * @throws IllegalArgumentException si <code>elemento</code> es
     *         <code>null</code>.
     */
    @Override public void agrega(T elemento) {
            if (elemento == null) throw new IllegalArgumentException();
            Nodo n = new Nodo(elemento);
            if (rabo == null){
                cabeza = rabo = n;
            }
            else {
                rabo.siguiente = n;
                n.anterior = rabo ;
                rabo = n;
            }
            longitud++;
    }

    /**
     * Agrega un elemento al final de la lista. Si la lista no tiene elementos,
     * el elemento a agregar será el primero y último.
     * @param elemento el elemento a agregar.
     * @throws IllegalArgumentException si <code>elemento</code> es
     *         <code>null</code>.
     */
    public void agregaFinal(T elemento) {
        agrega(elemento);
    }

    /**
     * Agrega un elemento al inicio de la lista. Si la lista no tiene elementos,
     * el elemento a agregar será el primero y último.
     * @param elemento el elemento a agregar.
     * @throws IllegalArgumentException si <code>elemento</code> es
     *         <code>null</code>.
     */
    public void agregaInicio(T elemento) {
        if (elemento == null) throw new IllegalArgumentException();
        Nodo n = new Nodo(elemento);
        if (cabeza == null){
            cabeza = rabo =n;
        }
        else {
            cabeza.anterior = n;
            n.siguiente = cabeza;
            cabeza = n;
            
        }
            longitud++;

    }


    private Nodo getiesimoNodo(int i){
        int a = 0;
        Nodo choya = cabeza;
        while (choya != null){
            if (a == i) return choya;
            choya = choya.siguiente;
            a++;
            
        }
        return (choya);
    }

    /**
     * Inserta un elemento en un índice explícito.
     *
     * Si el índice es menor o igual que cero, el elemento se agrega al inicio
     * de la lista. Si el índice es mayor o igual que el número de elementos en
     * la lista, el elemento se agrega al fina de la misma. En otro caso,
     * después de mandar llamar el método, el elemento tendrá el índice que se
     * especifica en la lista.
     * @param i el índice dónde insertar el elemento. Si es menor que 0 el
     *          elemento se agrega al inicio de la lista, y si es mayor o igual
     *          que el número de elementos en la lista se agrega al final.
     * @param elemento el elemento a insertar.
     * @throws IllegalArgumentException si <code>elemento</code> es
     *         <code>null</code>.
     */
    public void inserta(int i, T elemento) {
        if (elemento == null) throw new IllegalArgumentException();
        if (i<1) {agregaInicio(elemento);
        }
        else if (i>longitud-1){agregaFinal(elemento);
        }
        else {
            Nodo n = new Nodo(elemento);
            Nodo siguiente = getiesimoNodo(i) ;
            Nodo anterior = siguiente.anterior;
            longitud++;
            n.siguiente = siguiente;
            n.anterior = anterior;
            anterior.siguiente = n;
            siguiente.anterior = n;}
        
    }
    private Nodo buscanodos3000(T elemento) {
        Nodo n = cabeza; 
        while(n != null){
            if(n.elemento == elemento) return(n);
            n = n.siguiente;
        }
        return(null);

    }

    /**
     * Elimina un elemento de la lista. Si el elemento no está contenido en la
     * lista, el método no la modifica.
     * @param elemento el elemento a eliminar.
     */
    @Override public void elimina(T elemento) {
        if (elemento == null) return;
        Nodo  actual = buscanodos3000(elemento);
        Nodo siguiente = actual.siguiente;
        Nodo anterior  = actual.anterior;
        actual = null;
        siguiente.anterior=anterior;
        anterior.siguiente=siguiente;
    }

    /**
     * Elimina el primer elemento de la lista y lo regresa.
     * @return el primer elemento de la lista antes de eliminarlo.
     * @throws NoSuchElementException si la lista es vacía.
     */
    public T eliminaPrimero() {
        if (cabeza == null) throw new NoSuchElementException();
            Nodo  actual = cabeza;
            T EL = cabeza.elemento;
            Nodo siguiente = actual.siguiente;
            actual = null;
            siguiente.anterior=null;
            return(EL);
            longitud--;
            
        }
    

    /**
     * Elimina el último elemento de la lista y lo regresa.
     * @return el último elemento de la lista antes de eliminarlo.
     * @throws NoSuchElementException si la lista es vacía.
     */
    public T eliminaUltimo(){
        if (rabo == null) throw new NoSuchElementException();
            Nodo  actual = rabo;
            T EL = actual.elemento;
            Nodo anterior = actual.anterior;
            actual = null;
            anterior.siguiente=null;
            return(EL);
            longitud--;

    }
     
    

    /**
     * Nos dice si un elemento está en la lista.
     * @param elemento el elemento que queremos saber si está en la lista.
     * @return <code>true</code> si <code>elemento</code> está en la lista,
     *         <code>false</code> en otro caso.
     */
    @Override public boolean contiene(T elemento) {
    
        return(buscanodos3000(elemento) != null);

    }

    /**
     * Regresa la reversa de la lista.
     * @return una nueva lista que es la reversa la que manda llamar el método.
     */
    public Lista<T> reversa() {
        Lista<T> reversatronic5000 = new Lista<T>();
        Nodo choya = cabeza;
        while(choya != null){
            reversatronic5000.agregaInicio(choya.elemento);
            choya=choya.siguiente;
        }
        return(reversatronic5000);
    }

    /**
     * Regresa una copia de la lista. La copia tiene los mismos elementos que la
     * lista que manda llamar el método, en el mismo orden.
     * @return una copiad de la lista.
     */
    public Lista<T> copia() {
        Lista<T> reversatronic5000 = new Lista<T>();
        Nodo choya = cabeza;
        while(choya != null){
            reversatronic5000.agregaFinal(choya.elemento);
            choya=choya.siguiente;
        }
        return(reversatronic5000);
    }
    

    /**
     * Limpia la lista de elementos, dejándola vacía.
     */
    @Override public void limpia() {
        Nodo choya = cabeza;
       while (choya != null){
        eliminaUltimo();
        choya=choya.siguiente;
        }   
        longitud = 0;
    }


    /**
     * Regresa el primer elemento de la lista.
     * @return el primer elemento de la lista.
     * @throws NoSuchElementException si la lista es vacía.
     */
    public T getPrimero() {
        if (cabeza != null) throw new NoSuchElementException();
        return (cabeza.elemento);
    }

    /**
     * Regresa el último elemento de la lista.
     * @return el primer elemento de la lista.
     * @throws NoSuchElementException si la lista es vacía.
     */
    public T getUltimo() {
        if (rabo != null) throw new NoSuchElementException();
        return(rabo.elemento);
    }
   
    /**
     * Regresa el <em>i</em>-ésimo elemento de la lista.
     * @param i el índice del elemento que queremos.
     * @return el <em>i</em>-ésimo elemento de la lista.
     * @throws ExcepcionIndiceInvalido si <em>i</em> es menor que cero o mayor o
     *         igual que el número de elementos en la lista.
     */
    public T get(int i) {
        if (i<0) throw new ExcepcionIndiceInvalido();
        else if(i>longitud-1) throw new ExcepcionIndiceInvalido();
    else {
        Nodo n = getiesimoNodo(i);
        return(n.elemento);
        }
    }

    /**
     * Regresa el índice del elemento recibido en la lista.
     * @param elemento el elemento del que se busca el índice.
     * @return el índice del elemento recibido en la lista, o -1 si el elemento
     *         no está contenido en la lista.
     */
    public int indiceDe(T elemento) {
        int indicador = 0;
        Nodo choya = cabeza;
        while(choya != null){
            if(choya.elemento == elemento)
                return(indicador);
                indicador++;
        }
        return(indicador);
    }

    /**
     * Regresa una representación en cadena de la lista.
     * @return una representación en cadena de la lista.
     */
    @Override public String toString() {
        String s = "[";
        Nodo choya = cabeza;
        if (choya == null) return("[]");
        while (choya != rabo){s += String.format("%d, ", choya.elemento);choya=choya.siguiente;}
            s += String.format("%d]", rabo.elemento);
        return(s);
    }

    /**
     * Nos dice si la lista es igual al objeto recibido.
     * @param objeto el objeto con el que hay que comparar.
     * @return <code>true</code> si la lista es igual al objeto recibido;
     *         <code>false</code> en otro caso.
     */
    @Override public boolean equals(Object objeto) {
        if (objeto == null || getClass() != objeto.getClass())
            return false;
        @SuppressWarnings("unchecked") Lista<T> lista = (Lista<T>)objeto;
        if ( getLongitud() != lista.getLongitud()) {
                    return false; 
                } else {
                    Nodo choya = cabeza;
                   Nodo otrachoya= lista.cabeza;
            
                   while ( choya != null ) {
                        if ( !(choya.elemento == otrachoya.elemento)) return false;
                        choya = choya.siguiente;
                        otrachoya= otrachoya.siguiente;
                    }
            
                    return true;}
    }

    /**
     * Regresa un iterador para recorrer la lista en una dirección.
     * @return un iterador para recorrer la lista en una dirección.
     */
    @Override public Iterator<T> iterator() {
        return new Iterador();
    }

    /**
     * Regresa un iterador para recorrer la lista en ambas direcciones.
     * @return un iterador para recorrer la lista en ambas direcciones.
     */
    public IteradorLista<T> iteradorLista() {
        return new Iterador();
    }
